<!-- options: toc -->

% migrating

include sidebar-toc

@@box-r(If you're curious why I wrote v3, and what was wrong with v2, read
[this][why-v3].)@@

First things first: v3 came out in April 2012.  v2 will continue to be
supported for critical bugs, although enhancements and new features won't
happen.  v1 is not supported anymore.

That said, if you're an existing (gitolite v1.x or v2.x) user, and wish to
migrate, here are the steps:

@@gray(This page is about migrating from older gitolite to "v3".  If you're
migrating from *gitosis*, let me first welcome you to the 21st century, and
then point you [here][gsmigr].)@@

# pre-migration checklist

@@box-r(Both Fedora/RH and Debian use 'gitolite3' as the package name for this
version, because it is not auto-upgradable from v2.  You may need to uninstall
'gitolite' then install 'gitolite3' in that case.  Please take a backup of at
least `~/repositories/gitolite-admin.git`, `~/.gitolite.rc`, and `~/.gitolite`
before doing that.  You may need more specific help if you're using any of the
settings marked as "requires presetting" in the "high impact" subsection
below; please [contact][] me if needed.)@@

This section tells you what changes affect you and your users.  The closer you
were to a default install of the old gitolite, the less time a migration will
take.

**Note**: as you read this section, and run the `check-g2-compat` program, be
sure to make a note of any variables you have used which the pre-migration
checklist describes as "requires presetting".

----

First things first: v2 will be supported for a good long time for critical
bugs, although enhancements and new features won't happen.

Migration should be straightforward, but it is not automatic.  The biggest
differences are in the rc file, mirroring, "NAME/" rules, and delegation.

>   ----

>   **Presetting the rc file**

>   Some rc settings in the older gitolite are such that you cannot directly
>   run `gitolite setup` when you're ready to migrate.  **Doing that will
>   clobber something important**.  See [presetting the rc file][rc-preset]
>   for details.

>   ----

**The `check-g2-compat` program attempts to identify any *big* issues you will
be facing; run that first.  See [later][cg2c] in this page for what its
messages mean.  If it does not report any issues, your migrate will probably
go quickly.  I still suggest you go through the links below in case that
program missed something.**

## incompatible features

Here's a list of incompatible features and what you need to do to migrate.
Some of them have links where there is more detail than I want to put here.

### high impact

(serious loss of functionality and/or access control compromised)

  * [`NAME/`][g2i-name] rules: thes need to change to `VREF/NAME/`, and you
    need to add a deny rule at the end because fallthru is "success" for all
    [VREFs][vref] now, including the "NAME" VREF.

  * [subconf][g2i-subconf]: if you're using [delegation][deleg], there is no
    implicit "subconf" at the end; you'll have to add it in.

  * There are several important differences in mirroring.  You can start from
    scratch by reading the new [mirroring][mirroring] doc or
    [migrate][g2i-mirroring] (carefully!).

  * `ADMIN_POST_UPDATE_CHAINS_TO` -- **dropped**.  Add your script to the
    `POST_COMPILE` trigger chain.  Your script won't be getting the arguments
    that *git* sends to the post-update hook, but for the admin repo the only
    argument that even comes in (or is significant) is "refs/heads/master"
    anyway.

  * `GL_ALL_INCLUDES_SPECIAL` -- **dropped**, **requires presetting**.

    @all always includes gitweb and daemon now.  Use [deny-rules][] if you
    want to say `R = @all` but not have the repo(s) be visible to gitweb or
    daemon.

  * `GL_NO_CREATE_REPOS` -- **dropped**.  If you think you need this, email
    me.  I know one group who does need this so I will be putting it in
    eventually but not right away.  It's almost certain to be renamed anyway.

  * `GL_NO_DAEMON_NO_GITWEB` **dropped**, **requires presetting**.  Default
    will clobber your projects.list file and git-daemon-export-ok files.

    Comment out the 'daemon' and 'gitweb' lines in the ENABLE list in the rc
    file.  As you can see, gitweb and daemon can now be separately disabled,
    instead of both being tied to the same setting.

  * `GL_NO_SETUP_AUTHKEYS` **dropped**, **requires presetting**.  Default will
    clobber your authkeys file.

    Comment out all the line(s) that call ssh-authkeys in the rc file.

  * `UPDATE_CHAINS_TO` **dropped**, **requires presetting**.  Default will
    fail to run this extra check when users push.

    Use a [vref][] instead.  You can directly use any existing chained-to
    script as a VREF; they'll work.  Don't forget to add a rule that
    references the new VREF!

  * `GIT_PATH` **dropped**, **requires presetting**.

    If you need this, manipulate the PATH environment variable directly.  Just
    put something like this at the end of the rc file:

        $ENV{PATH} = "/some/non-standard/path:$ENV{PATH}";
        1;

### medium impact

(important functionality lost, but access control not compromised)

  * `GL_ADMINDIR` -- **dropped**, is now at a fixed location: `~/.gitolite`.
    If you want it somewhere else go ahead and move it, then place a symlink
    from the assumed location to the real one.

  * `GL_GET_MEMBERSHIPS_PGM` -- is now `GROUPLIST_PGM`, see
    [here][ldap].

  * `GL_WILDREPOS_DEFPERMS` -- is gone; see [roles][] for how to do this.

  * `REPO_BASE` -- **dropped**, is now at a fixed location: `~/repositories`.
    If you want it somewhere else go ahead and move it, then place a symlink
    from the assumed location to the real one.

### low impact

(ancillary, non-core, or minor functionality lost)

  * 'git-config' values have new restrictions.  See [compensating for
    UNSAFE\_PATT][unsafe-patt] for more on these restrictions and how to get
    around them.

  * Built-in command `expand` -- **dropped**.  The 'info' command shows you
    both normal and wild repos now.  The output format is also much simpler.

  * Built-in commands 'getperms', 'setperms' -- **merged** into command
    'perms'.  Run `ssh git@host perms -h` for details.

    Similarly, 'getdesc' and 'setdesc' have been merged into 'desc'.

  * Several 'ADC's -- please ask on the mailing list if you're using any that
	you don't see in the new 

  * [gl-time][g2i-gl-time]: the CpuTime module replaces gl-time.

  * `BIG_INFO_CAP` -- **dropped**.  If you think you must have this, try it
    without and see if there's a difference.  If you *know* you need this,
    convince me.

  * `GL_ADC_PATH` -- **dropped**.  It is obsolete; use [commands][] or add
    [your own][dev-notes].

  * `GL_ALL_READ_ALL` -- **dropped**.  If you think you must have this, try it
    without and see if there's a difference.  If you *know* you need this,
    convince me.

  * `GL_BIG_CONFIG` -- **dropped**.  This feature is default now.

  * `GL_CONF`, `GL_CONF_COMPILED`, and `GL_KEYDIR` -- **dropped**.  You had no
    business touching these anyway; if you did, move them into the expected
    default locations before attempting to run `gitolite setup`

  * `GL_GITCONFIG_KEYS` -- is now `GIT_CONFIG_KEYS`.

  * `GL_LOGT` -- now has a fixed value; email me if this is a problem.

  * `GL_PACKAGE_CONF` and `GL_PACKAGE_HOOKS` -- **dropped**.  They are not
    needed anymore, but check if you had any custom hooks set in the latter
    location and copy them across.

  * `GL_PERFLOGT` -- **dropped**.  See [gl-time][g2i-gl-time].

  * `GL_SITE_INFO` -- is now `SITE_INFO`.

  * `GL_WILDREPOS` -- **dropped**.  This feature is default now.

  * `GL_WILDREPOS_PERM_CATS` -- is now the ROLES hash in the rc file.

  * `RSYNC_BASE` -- needs work.  Email me if you are using this.

  * `NICE_VALUE` -- **dropped**.  Uncomment the 'renice 10' line in the rc
    file.  You can also change the 10 to something else if you wish.

  * `PROJECTS_LIST` -- is now `GITWEB_PROJECTS_LIST`.  More importantly, it is
    only used by update-gitweb-access-list in src/commands/post-compile.  This
    variable now has nothing to do with gitolite core, and the rc is just
    helping to store settings for non-core programs like that one.

  * `REPO_UMASK` -- is now `UMASK`.

  * `WEB_INTERFACE` and `GITWEB_URI_ESCAPE` -- **dropped**.  Patches to the
    update program to directly do those things are welcome.  Personally, I
    think people who use spaces and other funky characters in dir/file names
    should be shot but no one listens to me anyway.

## using the "check-g2-compat" program {#cg2c}

This program checks a few things only, not everything.  In particular, it
looks for settings and status that might:

  * make v3 unusable for lots of users
  * make v3 give *more* access than v2 under some conditions

It does NOT look for or warn about anything else; you're expected to read (and
act upon, if needed) the rest of the migration guide links given a few paras
above to cover everything else.

Here's an explanation of those messages that the check-g2-compat program may
put that contain the words "see docs":

  * `GL_ADMINDIR in the wrong place -- aborting`

    It expects to find `GL_ADMINDIR` and `REPO_BASE` pointing to the right
    places.  It aborts if these conditions are not met and does not scan
    further since that sort of guesswork is not good.  If you are in that
    position, make a symlink from the real location to the expected location,
    change the RC accordingly, and re-try.

  * `REPO_BASE in the wrong place -- aborting`

    same as above

  * `NAME rules`

    **This is a significant difference and affects access badly (gives access
    that would otherwise not be given)**.  Please see the [list of non-RC
    incompatibilities][g2incompat].

  * `subconf command in admin repo`

    This is not so bad security wise but it might *reduce* access by not
    processing files you intended to.  Again, see the same link as in the
    previous bullet.

  * `mirroring used`

    There have been quite a few changes to mirroring.  You can start from
    scratch by reading the new [mirroring][mirroring] doc or
    [migrate][g2i-mirroring] (carefully!).

  * `found N gl-creater files`

    These need to be renamed to `gl-creator` (the correct spelling at last,
    hooray!).  Suggested command sequence:

        cd $HOME/repositories
        find . -type d -name "*.git" -prune | while read r
        do
            mv $r/gl-creater $r/gl-creator
        done 2>/dev/null

    Once you do this, v2 will not work completely unless you change them back.

  * `found N gl-perms files with R or RW`

    Setting perms of R and RW will no longer work; you have to say READERS and
    WRITERS now.  Suggested command:

        find `gitolite query-rc GL_REPO_BASE` -name gl-perms |
            xargs perl -pi -e 's/\bR\b/READERS/;s/\bRW\b/WRITERS/'

## presetting the rc file {#rc-preset}

Some rc settings in the older gitolite are such that you cannot directly run
`gitolite setup` when you're ready to migrate.  **Doing that will clobber
something important**.  You have to create a default rc file, edit it
appropriately, and *then* run `gitolite setup`.

The most serious example of this is `GL_NO_SETUP_AUTHKEYS`, which tells the
(old) gitolite that you want to manage `~/.ssh/authorized_keys` yourself and
it should not fiddle with it.

If you don't preset the rc (in this case, by commenting out the 'ssh-authkeys'
line) **before** running `gitolite setup`, **your `~/.ssh/authorized_keys`
file will get clobbered**.

The actual rc settings that require presetting are listed in the "high
impact" section above.  This section tells you how to do the presetting.

  * rename (not just copy) your old (v2) rc file to something else

  * run

        gitolite print-default-rc > $HOME/.gitolite.rc

  * edit the file

        ${EDITOR:-vim} $HOME/.gitolite.rc

    make appropriate changes as described elsewhere in this migration guide,
    and save it.

  * *then* you can run [gitolite setup][setup].

# the actual migration

(Note: You may also like the [example migration][g2migr-example] page).

**Note**: nothing in any of the gitolite install/setup/etc will ever touch the
*data* in any repository except the gitolite-admin repo.  The only thing it
will normally touch in normal repos is the `update` hook.

**Note: all migration happens on the server; you do not need your
workstation**.

1.  Carefully wipe out the old gitolite:

      * The **code**

          * Delete or move away all the old gitolite scripts.  Check the path
            to the gl-auth-command in `~/.ssh/authorized_keys` if you forgot
            where you put them.

          * Delete or move away the two directories named in the two variables
            `GL_PACKAGE_CONF` and `GL_PACKAGE_HOOKS` in `~/.gitolite.rc`.

      * The **rc file**

          * Rename `~/.gitolite.rc` to something else.

      * The **admin repo**

          * clone `~/repositories/gitolite-admin.git` to someplace safe
          * then delete `~/repositories/gitolite-admin.git`

        (Make sure you do not delete any other repos!)

      * The **admin directory**.

          * If you need to preserve logs, move the ~/.gitolite/logs` directory
            somewhere else.

          * If you added any custom hooks and wish to preserve them, move the
            ~/.gitolite/hooks` directory somewhere else.

          * Delete `~/.gitolite`.

2.  Install gitolite v3; see [install][].

3.  If you're using any rc variables that the pre-migration checklist said
    would "require presetting", then read about [presetting][rc-preset] the rc
    file, and follow those instructions to create your new rc file.

4.  Setup gitolite; see [setup][].  However, the 'setup' step need not supply
    a private key.  You can run it as `gitolite setup -a admin`.

    NOTE: ignore any 'split conf not set, gl-conf present...' errors at this
    time.  You may see none, some, or many.  It does not matter right now.

5.  Make sure your gitolite-admin clone has the correct pubkey for the
    administrator in its `keydir` directory, then run [`gitolite push
    -f`][bypass] to overwrite the "default" admin repo created by the install.

    **NOTE that is `gitolite push` not `git push`!**

6.  Handle any errors, look for migration issues, etc., as described in the
    links at the top of this page.

    This also includes building up your new `~/.gitolite.rc` file.

You're done.

# appendix 1: v2-v3 incompatibilities {#g2incompat}

This page expands on some incompatibilities that were only briefly mentioned
in the pre-migration section earlier.

## NAME rules {#g2i-name}

1.  NAME/ rules must be changed to VREF/NAME/

2.  Fallthru on all VREFs is "success" now, so any NAME/ rules you have
    **MUST** change the rule list in some way to maintain the same
    restrictions.  The simplest is to add the following line to the end of
    each repo's rule list:
.#! conf/vim-color
        -   VREF/NAME/       =   @all
.end

## subconf command in admin repo {#g2i-subconf}

(This is also affected by the previous issue, 'NAME rules'; please read that
as well).

If you're using delegation in your admin conf setup, please add the following
lines to the end of the gitolite-admin rules in your conf/gitolite.conf file:

.#! conf/vim-color
    repo gitolite-admin
        -   VREF/NAME/       =   @all

    subconf "fragments/*.conf"
.end

The first part compensates for fallthru now being a success when processing
[VREF][vref] rules (NAME rules are just one specific VREF).  Although,
**ideally**, you should change your rule list so that you no longer require
that line.  As the [vref page][vref] says:

>   **Virtual refs are best used as additional "deny" rules**, performing
>   extra checks that core gitolite cannot.

The second part explicitly says when and where to include the subconf files.
(Before subconf was invented, this used to happen implicitly at the end of the
main conf file, and was hardcoded to that specific glob.)

## gl-time for performance measurement {#g2i-gl-time}

If you've been using gl-time for performance measurement, there's a much
better system available now.

gl-time used to only log elapsed time.  The new 'CpuTime' trigger module
shipped with gitolite, if enabled in the rc file, can also report CPU times
using perl's 'times()' function.  See comments within that file and in the
default rc file that contain the word "cpu", for more details.

Further, you can copy that module with a different name, add your own
functionality, and invoke *that* from the rc file instead.

## changes in mirroring setup {#g2i-mirroring}

There are several changes with regard to mirroring:

  * There is no 'post-receive' hook to be installed.  Mirroring is handled by
    v3's [triggers][] mechanism.  Gitolite triggers are enabled by adding (or
    uncommenting, in this case) appropriate lines in the rc file.

    You need to either remove these files (actually symlinks) from each repo's
    'hooks' directory, or remove the old (v2) sources so they become broken
    symlinks.

  * The `GL_HOSTNAME` variable is now `HOSTNAME`.  (Note that the rc file
    syntax itself has changed quite a bit; to be accurate, HOSTNAME is not a
    variable but a hash key with an associated value).

  * The `GL_GITCONFIG_KEYS` variable is now `GIT_CONFIG_KEYS`, **but** you no
    longer need to set it to anything for mirroring to work.

  * The `gl-tool` program does not exist anymore.  Adding keys for peer
    servers is done just like adding user keys, except that the pubkey file
    name must start with `server-`.  For example, to add a peer host called
    frodo, you will acquire its pubkey and add it as `server-frodo.pub`.

  * The config variables are quite different now.  The main ones now look like
    this:
.#! conf/vim-color
    option mirror.master        =   sam
    option mirror.slaves        =   frodo gollum
.end

    The redirectOK looks like this:
.#! conf/vim-color
    option mirror.redirectOK    =   frodo
.end

    The special value "true" to say that all slaves are trusted is now "all":
.#! conf/vim-color
    option mirror.redirectOK    =   all
.end

  * There are no more mirroring "keys", (lists of servers named in config keys
    like 'gitolite.mirror.nightly', etc).  You can certainly add lines like
.#! conf/vim-color
    option mirror.nightly       =   merry pippin
.end

    but they will not be processed by gitolite.  Your cron jobs should use
    `gitolite git-config` to query this variable, grab the list of peers, and
    run `gitolite mirror` on each of them.

  * The command to resync mirrors is 'mirror', run just like any other
    [command][commands].  In particular, you can run `gitolite mirror -h` to
    get help.  It cannot be run from a slave to ask a master to push (unlike
    in the old system) but what's more convenient is that any user who has any
    access to the master can run it remotely (if you allow it) to invoke a
    push.
