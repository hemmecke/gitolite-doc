# guest key management

Copyright: Ralf Hemmecke <ralf@hemmecke.de>.
Licensed under the [Creative Commons
Attribution-NonCommercial-ShareAlike 3.0 Unported
License](http://creativecommons.org/licenses/by-nc-sa/3.0/)

Guest key management allows certain users to add and remove guest keys.

The key management is done using a command called `gkm`. This command
must be enabled for remote use by the admin (see [here][commands] for
more on this).

----

[[TOC]]

----

## Important Warning!

Guest key management undermines the fundamental principle of gitolite
(see [authentication versus authorisation][auth]) by allowing certain
users to juggle with ssh public keys. Make sure the admin can login to
the server with a password, just in case something breaks and your
server `.ssh/authorized_keys` file is messed up.

## Who might be interested?

### The gitolite admin

Adding a new public key to the system means to copy the key into
`gitolite/keydir` commit and push.`

With `gkm` it would be

    cat FOO.PUB | ssh git@host gkm add KEYID

This would be a setup where only the gitolite admin can use `gkm`.
Not a big benefit, but anyway.

### Users that want their work being done quickly

Suppose the gitolite admin of a research institute has set up gitolite
to provide [wild repositories][wild] for example with a gitolite.conf
like this.

    # Allow only `RW` instead of `RW+` is importand later for `gkm`
    # since it prevents the admin from accidentally removing guest
    # keys. 
    repo gitolite-admin
        RW  =   gitadmin

    # These people are allowed to create wild repositories.
    @creators = u1 u2 ...

    # public repositories that are also shown in gitweb
    repo pub/CREATOR/..*
        C   =   @creators
        RW+ =   CREATOR
        RW  =   WRITERS
        R   =   READERS gitweb daemon

    # These project are protected from being read by gitweb by explicitly
    # making the directory "private" unreadable by www-data.
    repo private/CREATOR/..*
        C   =   @creators
        RW+ =   CREATOR
        RW  =   WRITERS
        R   =   READERS
  
Researchers Alice and Bob want to write an article together. Alice
creates a wild repository `private/alice/article` and adds Bob via the
`perms` command to the WRITERS of her repository. After a while they
realize that Otto from another institute would be a reasonable third
author. However, if they cannot give him write access to the
repository, they would have to exchange the article via email. Back to
the stone age? Better, Alice asks Otto to send her his public ssh key.
Alice then forwards that key to the gitolite administrator and asks
him to include that key into the system. (Hopefully, all that didn't
happen on a holiday or on the weekend.) After 3 days the gitolite
administrater finds some time. Since he doesn't know Otto, he simply
trusts Alice and adds the public key into the system.

With `gkm` Alice can save bothering the gitolite administrator and is
perhaps even faster in saying:

    cat otto.pub | ssh git@host gkm add otto@other.institute.edu
    ssh git@host perms private/alice/article + WRITERS otto@other.institute.edu

The effect would be the same.

## How to enable guest key management and who can use it?

>    ----

>    **WARNING**: It has not been tested whether the `sskm` command
>    works together with `gkm`. Maybe it does, but guest users should
>    definitely not be allowed to use `sskm`, since `gkm` was designed
>    for exactly one key per guest.

>    ----

There are two files where `gkm` must be enabled.

  * In [.gitolite.rc][rc]:

    Guest key management must be enabled by adding something like

        'gkm' => { FORBIDDEN\_ID\_PATTERN => qr(^SOME-PATTERN$) },

    to the `COMMANDS`.

    Simply adding

        'gkm' => 1,

    is equivalent to

        'gkm' => {FORBIDDEN\_ID\_PATTERN => qr(^[^@]+$},

    Any keyid that matches this pattern is rejected.

    If not set explicitly, `gkm` will reject keys that are added under
    any keyid (in other words `gkm` is still disabled).

    If your company has email addresses of the form
    `first.last@my-company.com` you might want to write something like
    this

        'gkm' => { FORBIDDEN\_ID\_PATTERN => qr(^[^@]+$|@my-company.com$) },

    which would forbid anything without a `@` in the keyid as well as
    any keyid that looks like an email address of your company.

    (optional) <font color="red">**For the very brave only!!! Don't
    complain if you modify the default value!**</font>

    Additionaly, you can put

        GUESTS_DIRECTORY => 'zzzzz-guests',

    into the `'gkm'` hash. This corresponds to a subdirectory under
    `gitolite-admin/keydir` where the guest keys will be stored. The
    above value is the default. This value starts with 'zzzzz' to let
    guest keys appear at the very end in `authorized_keys`.

  * In `gitolite-admin/conf/gitolite.conf`:

    Create a group `@guest-key-managers` and add (trusted) users to
    this group. Only users of that group are allowed to use the `gkm`
    command.

    **WARNING**: If you include `@all` into this list, it allows
    guests to add new public keys. If, additionally, you have
    `@creators=@all`, you basically allow your initial users to start
    a hierarchy of new users with the same rights as the initial
    users.

## How to use guest key management?

There are three subcommands of `gkm`, namely `list` (the default),
`add`, and `del`.

### List managed keys

As guest key manager one can list all the personally managed keys via:

    ssh git@host gkm

or

    ssh git@host gkm list

### Add a new public key

The command for this is:

    cat foo.pub | ssh git@host gkm add foo@example.com

There are several situations when a adding a key is rejected.

  * If the keyid is among a pattern that has been set by the gitolite
    admin, then the key is rejected. 

  * If the fingerprint of `foo.pub` is already known to the system,
    then `gkm` will reject the key and show to which keyid this key
    belongs. Adding `foo.pub` under this other keyid should work
    unless it is rejected by the previous condition.

  * If the keyid `foo@example.com` is already in use and it
    corresponds to key with another fingerprint, then `gkm` will
    reject the key and show the corresponding fingerprint. The guest
    key manager has to ask the guest to provide a public key with this
    exact fingerprint or add `foo.pub` under another keyid.

### Delete a guest key

The command for this is:

    ssh git@host gkm del foo@example.com

If the given keyid is not among the managed keys of the user who
issues the `del` command, the command will fail.

**IMPORTANT!** You should not forget to remove from all of your
repositories all the permissions you gave to `foo@example.com`

You might want to run

    ssh git@host info -lc \
    | perl -e 'chomp($u=<>);$u=~s/hello //;$u=~s/,.*$//;' \
           -e 'while(<>){if(/\s(\S+)\s+$u$/){print "$1\n"}}' \
    | while read r; do ssh git@host perms $r - WRITERS foo@example.com; done

Repeat this for other roles such as `READERS`.

### Generic Errors

Key management is done via creating a temporary clone of the
`gitolite-admin` repository, changing, committing, and pushing back.
In cases where two guest key managers add a new key at the same time,
one of the push commands will most probably fail. Then simply redo the
command after a while.
