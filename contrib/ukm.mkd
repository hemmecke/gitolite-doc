# key management

Copyright 2012-2013  Ralf Hemmecke <ralf@hemmecke.org>.

Licensed under the [Creative Commons
Attribution-NonCommercial-ShareAlike 3.0 Unported
License](http://creativecommons.org/licenses/by-nc-sa/3.0/)

Key management allows certain users to add and remove keys.

The key management is done using a command called `ukm`. This command
must be enabled for remote use by the admin (see [here][commands] for
more on this) or look below.

----

[[TOC]]

----

## Important Warning!

User key management undermines the fundamental principle of gitolite
(see [authentication versus authorisation][auth]) by allowing certain
users to juggle with ssh public keys. Make sure the someone
(sysadmin?) can login to the server with a **password**, just in case
something breaks and the `.ssh/authorized_keys` file for the
user running gitolite on the server is messed up.

## Who might be interested?

### The gitolite admin

Adding a new public key to the system means to copy the key into
`gitolite/keydir` commit and push.

With `ukm` it would be

    cat FOO.PUB | ssh git@host ukm add KEYID

This would be a setup where only the gitolite admin can use `ukm`.
Not a big benefit, but `ukm` prevents adding identical keys
under different userids.

### Users that want their work being done quickly

Suppose the gitolite admin of a research institute has set up gitolite
to provide [wild repositories][wild] for example with a gitolite.conf
like this.

    repo gitolite-admin
        RW+  =   gitadmin

    # These people are allowed to create wild repositories.
    @creators = alice bob ...

    # public repositories that are also shown in gitweb
    repo pub/CREATOR/..*
        C   =   @creators
        RW+ =   CREATOR
        RW  =   WRITERS
        R   =   READERS
  
Researchers Alice and Bob want to write an article together. Alice
creates a wild repository `private/alice/article` and adds Bob via the
`perms` command to the WRITERS of her repository. After a while they
realize that Otto from another institute would be a reasonable third
author. However, if they cannot give him write access to the
repository, they would have to exchange the article via email. Back to
the stone age? Better, Alice asks Otto to send her his public ssh key.
Alice then forwards that key to the gitolite administrator and asks
him to include that key into the system. (Hopefully, all that didn't
happen on a holiday or on the weekend.) After 3 days the gitolite
administrater finds some time. Since he doesn't know Otto, he simply
trusts Alice and adds the public key into the system.

With `ukm` Alice can save bothering the gitolite administrator and is
perhaps even faster in saying:

    cat otto.pub | ssh git@host ukm add otto@other.institute.edu
    ssh git@host perms private/alice/article + WRITERS otto@other.institute.edu

The effect would be the same.

## How to enable user key management and who can use it?

>    ----

>    **WARNING**: It has not been tested whether the `sskm` command
>    works together with `ukm`. Maybe it does, but guest users should
>    definitely not be allowed to use `sskm`.
>
>    In the future, `ukm` may be extended to allow some users to
>    add/delete their own keys similar to what `sskm` provides now.

>    ----

There are two files where `ukm` must be enabled.

  * In [.gitolite.rc][rc]:

    User key management must be enabled by adding something like

        'ukm' => {
                ALLOWED_GUEST_PATTERN   => qr(ALLOWED-PATTERN),
                FORBIDDEN_GUEST_PATTERN => qr(FORBIDDEN-PATTERN),
            },

    to the `COMMANDS`.

    With the meaning that the [KEYID](#KEYID) **must match**

        qr(^($ALLOWED_GUEST_PATTERN)$)

    and **must not match**

        $FORBIDDEN_GUEST_PATTERN

    in order for `ukm` to proceed with this [KEYID](#KEYID) for a
    [guest key manager](#GKM).

    If `ALLOWED_GUEST_PATTERN` is missing, it defaults to a pattern
    that allows only [KEYID](#KEYID)s that look like email addresses.

    If `FORBIDDEN_GUEST_PATTERN` is missing or if there is simply

        'ukm' => 1,

    it defaults to

        FORBIDDEN_GUEST_PATTERN => qr(.)

    Any [KEYID](#KEYID) that matches this pattern is rejected, i.e.,
    it basically allows only the [super key managers](#SKM) to add/del
    keys.

    If `ukm` is supposed to work for people other than the gitolite
    admin, `FORBIDDEN_GUEST_PATTERN` must be set to some reasonable
    value.

    If your company has email addresses of the form
    `first.last@company.com` you might want to write something like
    this

        'ukm' => { FORBIDDEN_GUEST_PATTERN => qr(@company.com$) },

    which would only allow [KEYID](#KEYID)s in the form of email
    addresses that do not come from your company.

    (optional) <font color="red">**For the very brave only!!! Don't
    complain if you modify the default value!**</font>

    Additionaly, you can put

        GUESTS_DIRECTORY => 'zzzzz-guests',

    into the `'ukm'` hash. This corresponds to a subdirectory under
    `gitolite-admin/keydir` where the guest keys will be stored. The
    above value is the default. This value starts with 'zzzzz' to let
    guest keys appear at the very end in `authorized_keys`.

  * In `gitolite-admin/conf/gitolite.conf`:

    Create a group `@guest-key-managers` and add (trusted) users to
    this group. Only users of that group and
    [super key managers](#SKM) are allowed to use the `ukm` command.

    **WARNING**: If you include `@all` into this list, it allows
    guests to add new public keys. If, additionally, you have
    `@creators=@all`, you basically allow your initial users to start
    a hierarchy of new users with the same rights as the initial
    users.

## How to use user key management?

There are three subcommands of `ukm`, namely `list` (the default),
`add`, and `del`.

### List managed keys

A [guest key manager](#GKM) can list all the personally managed keys
via:

    ssh git@host ukm

or

    ssh git@host ukm list

If this command is issued by a [super key manager](#SKM), it lists all
keys that are stored under `keydir/`.

### Add a new public key

The command for this is:

    cat foo.pub | ssh git@host ukm add foo@example.com

There are several situations when the above command fails, i.e.,
rejects to add the key.

  * The [KEYID](#KEYID) `foo@example.com` does not match the pattern
    given by `ALLOWED_GUEST_PATTERN` in `.gitolite.rc`.

  * The [KEYID](#KEYID) `foo@example.com` matches the pattern given by
    `FORBIDDEN_GUEST_PATTERN` in `.gitolite.rc`.

  * The public key `foo.pub` is already known to the system and does
    not belong to the [USERID](#USERID) `foo@example.com`.

  * The [KEYID](#KEYID) `foo@example.com` is already in use and it
    corresponds to a key with another public key. In other words,
    `ukm` will not simply override a key. One has to delete the old
    key first and then add a new one.

  * The [KEYID](#KEYID) contains a `/` character or two `@`
    characters, i.e., guest key managers are not allowed to add
    [multiple keys](#MULTIKEY) for one user.

A [super key manager](#SKM) can nearly add any key, but `ukm` does not
accept a different key for the same [KEYID](#KEYID). Also a double dot
is not allowed.

### Delete a guest key

The command for this is:

    ssh git@host ukm del foo@example.com

If the given [KEYID](#KEYID) is not among the managed keys of the user
who issues the `del` command, the command will fail.

**IMPORTANT!** You should not forget to remove from all of your
repositories all the permissions you gave to `foo@example.com`,
because this key might still be managed by another
[guest key manager](#GKM).

You might want to run

    ssh git@host info -lc \
    | perl -e 'chomp($u=<>);$u=~s/hello //;$u=~s/,.*$//;' \
           -e 'while(<>){if(/\s(\S+)\s+$u$/){print "$1\n"}}' \
    | while read r; do ssh git@host perms $r - WRITERS foo@example.com; done

Repeat this for other roles such as `READERS` instead of `WRITERS`.

### Generic Errors

Key management is done via creating a temporary clone of the
`gitolite-admin` repository, changing, committing, and pushing back.
In cases where two people are trying to modify the `gitolite-admin` at
the same time, one of the push commands will most probably fail. Then
simply redo the command after a while.

## Glossary

* **super key manager**<a id="SKM"></a>:
  Users with write access to the `gitolite-admin` repositoriy count
  as [super key managers](#SKM) and have no restriction on how
  [KEYID](#KEYID)s must look like. They can do (nearly) everything
  inside `keydir/` that they could do anyway when pushing to the
  `gitolite-admin` repository directly.

* **guest key manager**<a id="GKM"></a>:
  a user who is a member of the `@guest-key-manager` group

* **KEYID**<a id="KEYID"></a>:
  an identifier for a key given on the command line

  The KEYID is normalized to lowercase letters.

  If the script is called by one of the super key managers, then the
  KEYID is the path to the pubkey file relative to the `keydir/`
  without the `.pub` extension.

  If called by a guest key manager, it's relative to the
  `GUEST_DIRECTORY`.

* **USERID**<a id="USERID"></a>:
  The [KEYID](#KEYID) given on the command line will be translated
  into a USERID which is used inside `conf/gitolite.conf` or for the
  [perms][] [command][commands] of gitolite.

## Security note

<a id="MULTIKEY">
[Super key managers](#SKM) can basically add any key, but
[guest key managers](#GKM) are not allowed to add
[multiple keys][multi-key] and this restriction is hardcoded.

Suppose Alice adds `bob.pub` for `bob@example.org` and David adds
`eve.pub` under the keyid `bob@example.org@foo`. (Of course, only Eve
and not Bob has the private key correspoinding to `eve.pub`.) This
basically gives Eve the same rights as Bob.

## Important notes for the admin

Note that `ukm` clones, changes, and pushes back the `gitolite-admin`
repo. This means, even if you're the only administrator, you should
never `git push -f`, because that might override something `ukm`
did.
